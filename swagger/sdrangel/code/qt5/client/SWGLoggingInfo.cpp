/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGLoggingInfo.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGLoggingInfo::SWGLoggingInfo(QString* json) {
    init();
    this->fromJson(*json);
}

SWGLoggingInfo::SWGLoggingInfo() {
    init();
}

SWGLoggingInfo::~SWGLoggingInfo() {
    this->cleanup();
}

void
SWGLoggingInfo::init() {
    console_level = new QString("");
    file_level = new QString("");
    dump_to_file = false;
    file_name = new QString("");
}

void
SWGLoggingInfo::cleanup() {
    
    if(console_level != nullptr) {
        delete console_level;
    }

    if(file_level != nullptr) {
        delete file_level;
    }


    if(file_name != nullptr) {
        delete file_name;
    }
}

SWGLoggingInfo*
SWGLoggingInfo::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGLoggingInfo::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&console_level, pJson["consoleLevel"], "QString", "QString");
    ::Swagger::setValue(&file_level, pJson["fileLevel"], "QString", "QString");
    ::Swagger::setValue(&dump_to_file, pJson["dumpToFile"], "bool", "");
    ::Swagger::setValue(&file_name, pJson["fileName"], "QString", "QString");
}

QString
SWGLoggingInfo::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGLoggingInfo::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("consoleLevel"), console_level, obj, QString("QString"));

    toJsonValue(QString("fileLevel"), file_level, obj, QString("QString"));

    obj->insert("dumpToFile", QJsonValue(dump_to_file));

    toJsonValue(QString("fileName"), file_name, obj, QString("QString"));

    return obj;
}

QString*
SWGLoggingInfo::getConsoleLevel() {
    return console_level;
}
void
SWGLoggingInfo::setConsoleLevel(QString* console_level) {
    this->console_level = console_level;
}

QString*
SWGLoggingInfo::getFileLevel() {
    return file_level;
}
void
SWGLoggingInfo::setFileLevel(QString* file_level) {
    this->file_level = file_level;
}

bool
SWGLoggingInfo::getDumpToFile() {
    return dump_to_file;
}
void
SWGLoggingInfo::setDumpToFile(bool dump_to_file) {
    this->dump_to_file = dump_to_file;
}

QString*
SWGLoggingInfo::getFileName() {
    return file_name;
}
void
SWGLoggingInfo::setFileName(QString* file_name) {
    this->file_name = file_name;
}


}

