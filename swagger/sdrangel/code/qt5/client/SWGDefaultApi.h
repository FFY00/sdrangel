/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDefaultApi_H_
#define _SWG_SWGDefaultApi_H_

#include "SWGHttpRequest.h"

#include "SWGAudioDevices.h"
#include "SWGAudioDevicesSelect.h"
#include "SWGDVSeralDevices.h"
#include "SWGDeviceSet.h"
#include "SWGDeviceSetList.h"
#include "SWGErrorResponse.h"
#include "SWGInstanceChannelsResponse.h"
#include "SWGInstanceDevicesResponse.h"
#include "SWGInstanceSummaryResponse.h"
#include "SWGLocationInformation.h"
#include "SWGLoggingInfo.h"
#include "SWGPresetIdentifier.h"
#include "SWGPresetTransfer.h"
#include "SWGPresets.h"

#include <QObject>

namespace Swagger {

class SWGDefaultApi: public QObject {
    Q_OBJECT

public:
    SWGDefaultApi();
    SWGDefaultApi(QString host, QString basePath);
    ~SWGDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void instanceAudioGet();
    void instanceAudioPatch(SWGAudioDevicesSelect body);
    void instanceChannels(bool tx);
    void instanceDVSerialPatch(bool dvserial);
    void instanceDeviceSetsDelete();
    void instanceDeviceSetsGet();
    void instanceDeviceSetsPost(bool tx);
    void instanceDevices(bool tx);
    void instanceLocationGet();
    void instanceLocationPut(SWGLocationInformation body);
    void instanceLoggingGet();
    void instanceLoggingPut(SWGLoggingInfo body);
    void instancePresetDelete(SWGPresetIdentifier body);
    void instancePresetGet();
    void instancePresetPatch(SWGPresetTransfer body);
    void instancePresetPost(SWGPresetTransfer body);
    void instancePresetPut(SWGPresetTransfer body);
    void instanceSummary();
    
private:
    void instanceAudioGetCallback (HttpRequestWorker * worker);
    void instanceAudioPatchCallback (HttpRequestWorker * worker);
    void instanceChannelsCallback (HttpRequestWorker * worker);
    void instanceDVSerialPatchCallback (HttpRequestWorker * worker);
    void instanceDeviceSetsDeleteCallback (HttpRequestWorker * worker);
    void instanceDeviceSetsGetCallback (HttpRequestWorker * worker);
    void instanceDeviceSetsPostCallback (HttpRequestWorker * worker);
    void instanceDevicesCallback (HttpRequestWorker * worker);
    void instanceLocationGetCallback (HttpRequestWorker * worker);
    void instanceLocationPutCallback (HttpRequestWorker * worker);
    void instanceLoggingGetCallback (HttpRequestWorker * worker);
    void instanceLoggingPutCallback (HttpRequestWorker * worker);
    void instancePresetDeleteCallback (HttpRequestWorker * worker);
    void instancePresetGetCallback (HttpRequestWorker * worker);
    void instancePresetPatchCallback (HttpRequestWorker * worker);
    void instancePresetPostCallback (HttpRequestWorker * worker);
    void instancePresetPutCallback (HttpRequestWorker * worker);
    void instanceSummaryCallback (HttpRequestWorker * worker);
    
signals:
    void instanceAudioGetSignal(SWGAudioDevices* summary);
    void instanceAudioPatchSignal(SWGAudioDevicesSelect* summary);
    void instanceChannelsSignal(SWGInstanceChannelsResponse* summary);
    void instanceDVSerialPatchSignal(SWGDVSeralDevices* summary);
    void instanceDeviceSetsDeleteSignal(SWGDeviceSetList* summary);
    void instanceDeviceSetsGetSignal(SWGDeviceSetList* summary);
    void instanceDeviceSetsPostSignal(SWGDeviceSet* summary);
    void instanceDevicesSignal(SWGInstanceDevicesResponse* summary);
    void instanceLocationGetSignal(SWGLocationInformation* summary);
    void instanceLocationPutSignal(SWGLocationInformation* summary);
    void instanceLoggingGetSignal(SWGLoggingInfo* summary);
    void instanceLoggingPutSignal(SWGLoggingInfo* summary);
    void instancePresetDeleteSignal(SWGPresetIdentifier* summary);
    void instancePresetGetSignal(SWGPresets* summary);
    void instancePresetPatchSignal(SWGPresetIdentifier* summary);
    void instancePresetPostSignal(SWGPresetIdentifier* summary);
    void instancePresetPutSignal(SWGPresetIdentifier* summary);
    void instanceSummarySignal(SWGInstanceSummaryResponse* summary);
    
    void instanceAudioGetSignalE(SWGAudioDevices* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceAudioPatchSignalE(SWGAudioDevicesSelect* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceChannelsSignalE(SWGInstanceChannelsResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceDVSerialPatchSignalE(SWGDVSeralDevices* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceDeviceSetsDeleteSignalE(SWGDeviceSetList* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceDeviceSetsGetSignalE(SWGDeviceSetList* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceDeviceSetsPostSignalE(SWGDeviceSet* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceDevicesSignalE(SWGInstanceDevicesResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceLocationGetSignalE(SWGLocationInformation* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceLocationPutSignalE(SWGLocationInformation* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceLoggingGetSignalE(SWGLoggingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceLoggingPutSignalE(SWGLoggingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instancePresetDeleteSignalE(SWGPresetIdentifier* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instancePresetGetSignalE(SWGPresets* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instancePresetPatchSignalE(SWGPresetIdentifier* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instancePresetPostSignalE(SWGPresetIdentifier* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instancePresetPutSignalE(SWGPresetIdentifier* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void instanceSummarySignalE(SWGInstanceSummaryResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
