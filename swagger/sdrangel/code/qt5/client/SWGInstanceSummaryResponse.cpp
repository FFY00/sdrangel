/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGInstanceSummaryResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGInstanceSummaryResponse::SWGInstanceSummaryResponse(QString* json) {
    init();
    this->fromJson(*json);
}

SWGInstanceSummaryResponse::SWGInstanceSummaryResponse() {
    init();
}

SWGInstanceSummaryResponse::~SWGInstanceSummaryResponse() {
    this->cleanup();
}

void
SWGInstanceSummaryResponse::init() {
    version = new QString("");
    logging = new SWGLoggingInfo();
    devicesetlist = new SWGDeviceSetList();
    user = new SWGUser();
}

void
SWGInstanceSummaryResponse::cleanup() {
    
    if(version != nullptr) {
        delete version;
    }

    if(logging != nullptr) {
        delete logging;
    }

    if(devicesetlist != nullptr) {
        delete devicesetlist;
    }

    if(user != nullptr) {
        delete user;
    }
}

SWGInstanceSummaryResponse*
SWGInstanceSummaryResponse::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGInstanceSummaryResponse::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&version, pJson["version"], "QString", "QString");
    ::Swagger::setValue(&logging, pJson["logging"], "SWGLoggingInfo", "SWGLoggingInfo");
    ::Swagger::setValue(&devicesetlist, pJson["devicesetlist"], "SWGDeviceSetList", "SWGDeviceSetList");
    ::Swagger::setValue(&user, pJson["user"], "SWGUser", "SWGUser");
}

QString
SWGInstanceSummaryResponse::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGInstanceSummaryResponse::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("version"), version, obj, QString("QString"));

    toJsonValue(QString("logging"), logging, obj, QString("SWGLoggingInfo"));

    toJsonValue(QString("devicesetlist"), devicesetlist, obj, QString("SWGDeviceSetList"));

    toJsonValue(QString("user"), user, obj, QString("SWGUser"));

    return obj;
}

QString*
SWGInstanceSummaryResponse::getVersion() {
    return version;
}
void
SWGInstanceSummaryResponse::setVersion(QString* version) {
    this->version = version;
}

SWGLoggingInfo*
SWGInstanceSummaryResponse::getLogging() {
    return logging;
}
void
SWGInstanceSummaryResponse::setLogging(SWGLoggingInfo* logging) {
    this->logging = logging;
}

SWGDeviceSetList*
SWGInstanceSummaryResponse::getDevicesetlist() {
    return devicesetlist;
}
void
SWGInstanceSummaryResponse::setDevicesetlist(SWGDeviceSetList* devicesetlist) {
    this->devicesetlist = devicesetlist;
}

SWGUser*
SWGInstanceSummaryResponse::getUser() {
    return user;
}
void
SWGInstanceSummaryResponse::setUser(SWGUser* user) {
    this->user = user;
}


}

